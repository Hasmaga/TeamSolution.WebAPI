// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamSolution.DatabaseContext;

#nullable disable

namespace TeamSolution.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230916072144_v1.0")]
    partial class v10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeamSolution.Model.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreId");

                    b.Property<DateTime>("UpdateDatetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDatetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedBacks", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderDetailId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<decimal>("AppFee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AppFee");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("DoneTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DoneTime");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDateTime");

                    b.Property<decimal>("ShipFee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ShipFee");

                    b.Property<Guid>("ShipperDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShipperDetailId");

                    b.Property<Guid>("StaffBeginId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffBeginId");

                    b.Property<Guid>("StaffDoneId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffDoneId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreId");

                    b.Property<Guid>("StoreModeSettingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreModeSettingId");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalMoney");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ShipperDetailId");

                    b.HasIndex("StaffBeginId");

                    b.HasIndex("StaffDoneId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreModeSettingId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.ShipperDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ShipperDetails", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusName");

                    b.HasKey("Id");

                    b.ToTable("Statuses", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreModeSettingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreModeSettingId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreModeSettingId");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.StoreModeSeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<decimal>("FastWeightIn1Kg")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FastWeightIn1Kg");

                    b.Property<decimal>("NormalWeightIn1Kg")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("NormalWeightIn1Kg");

                    b.Property<decimal>("SuperFastWeightIn1Kg")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SuperFastWeightIn1Kg");

                    b.HasKey("Id");

                    b.ToTable("StoreModeSetings", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<int>("ForgotPasswordTimes")
                        .HasColumnType("int")
                        .HasColumnName("ForgotPasswordTimes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IsDelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreId");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Wallet");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TeamSolution.Model.FeedBack", b =>
                {
                    b.HasOne("TeamSolution.Model.Store", "Store")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.User", "User")
                        .WithMany("FeedBacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamSolution.Model.Order", b =>
                {
                    b.HasOne("TeamSolution.Model.OrderDetail", "OrderDetail")
                        .WithMany("Orders")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamSolution.Model.OrderDetail", b =>
                {
                    b.HasOne("TeamSolution.Model.ShipperDetail", "ShipperDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ShipperDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.User", "StaffBegin")
                        .WithMany("OrderDetailsBegin")
                        .HasForeignKey("StaffBeginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.User", "StaffDone")
                        .WithMany("OrderDetailsDone")
                        .HasForeignKey("StaffDoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.Status", "Status")
                        .WithMany("OrderDetails")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.Store", "Store")
                        .WithMany("OrderDetails")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.StoreModeSeting", "StoreModeSeting")
                        .WithMany("OrderDetails")
                        .HasForeignKey("StoreModeSettingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ShipperDetail");

                    b.Navigation("StaffBegin");

                    b.Navigation("StaffDone");

                    b.Navigation("Status");

                    b.Navigation("Store");

                    b.Navigation("StoreModeSeting");
                });

            modelBuilder.Entity("TeamSolution.Model.ShipperDetail", b =>
                {
                    b.HasOne("TeamSolution.Model.Status", "Status")
                        .WithMany("ShipperDetails")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.User", "User")
                        .WithMany("ShipperDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamSolution.Model.Store", b =>
                {
                    b.HasOne("TeamSolution.Model.Status", null)
                        .WithMany("Stores")
                        .HasForeignKey("StatusId");

                    b.HasOne("TeamSolution.Model.StoreModeSeting", "StoreModeSeting")
                        .WithMany("Stores")
                        .HasForeignKey("StoreModeSettingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StoreModeSeting");
                });

            modelBuilder.Entity("TeamSolution.Model.User", b =>
                {
                    b.HasOne("TeamSolution.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeamSolution.Model.Store", "Store")
                        .WithMany("Users")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TeamSolution.Model.OrderDetail", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TeamSolution.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeamSolution.Model.ShipperDetail", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TeamSolution.Model.Status", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ShipperDetails");

                    b.Navigation("Stores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeamSolution.Model.Store", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeamSolution.Model.StoreModeSeting", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("TeamSolution.Model.User", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("OrderDetailsBegin");

                    b.Navigation("OrderDetailsDone");

                    b.Navigation("Orders");

                    b.Navigation("ShipperDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
